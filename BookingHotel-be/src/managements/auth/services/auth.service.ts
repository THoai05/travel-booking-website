import { Injectable, BadRequestException, UnauthorizedException } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import * as bcrypt from 'bcrypt';
import { User, UserRole, MembershipLevel } from '../../users/entities/users.entity';

@Injectable()
export class AuthService {
  constructor(
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
  ) {}

  async register(data: {
	  username: string;
	  password: string;
	  fullName: string;
	  email: string;
	  phone: string;
	  dob?: string; // ‚úÖ th√™m tr∆∞·ªùng ng√†y sinh (ISO string, v√≠ d·ª•: "2000-05-12")
	}) {
	  const { username, email, password, fullName, phone, dob } = data;

	  // üîç Ki·ªÉm tra username ho·∫∑c email tr√πng
	  const existUser = await this.userRepo.findOne({
		where: [{ username }, { email }],
	  });
	  if (existUser) throw new BadRequestException('Username ho·∫∑c Email ƒë√£ t·ªìn t·∫°i!');

	  // üîí Hash password
	  const hashed = await bcrypt.hash(password, 10);

	  // üß© T·∫°o user m·ªõi
	  const newUser = this.userRepo.create({
		username,
		password: hashed,
		fullName,
		email,
		phone,
		role: UserRole.CUSTOMER,
		membershipLevel: MembershipLevel.SILVER,
		dob: dob ? new Date(dob) : undefined, // ‚úÖ g√°n ng√†y sinh (n·∫øu c√≥)
	  });

	  await this.userRepo.save(newUser);
	  return { message: 'ƒêƒÉng k√Ω th√†nh c√¥ng', userId: newUser.id };
	}


	async login(data: { usernameOrEmail: string; password: string }) {
	  const { usernameOrEmail, password } = data;

	  const user = await this.userRepo.findOne({
		where: [
		  { username: usernameOrEmail },
		  { email: usernameOrEmail }
		]
	  });

	  if (!user) throw new UnauthorizedException('Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!');

	  const valid = await bcrypt.compare(password, user.password);
	  if (!valid) throw new UnauthorizedException('Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!');

	  // Xo√° m·∫≠t kh·∫©u tr∆∞·ªõc khi tr·∫£ v·ªÅ
	  const { password: _, ...userWithoutPassword } = user;

	  return {
		message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
		user: userWithoutPassword
	  };
	}

}
